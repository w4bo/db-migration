plugins {
    id 'java-library'
    id 'war'
    id 'antlr'
    id 'org.jetbrains.kotlin.jvm' version '1.6.10'
    id 'org.gretty' version '3.0.7'
    id 'idea'
    id 'nebula.lint' version '17.6.1'
    id 'com.github.johnrengelman.shadow' version '7.1.2'
}

gretty {
    contextPath = '/'
    servletContainer = 'jetty9'
}

compileJava {
    sourceCompatibility = '1.8'
    targetCompatibility = '1.8'
}

repositories {
    mavenCentral()
    maven { url "https://kotlin.bintray.com/kotlinx" }
}

sourceSets {
    main { resources { srcDirs 'src/main/resources' } }
}

dependencies {
    implementation 'io.github.cdimascio:dotenv-kotlin:6.2.2'
    implementation 'com.github.doyaaaaaken:kotlin-csv-jvm:1.2.0'
    implementation 'org.apache.commons:commons-csv:1.9.0'
    implementation "org.jetbrains.kotlinx:kotlinx-cli:0.3.4"
    implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk8'
    implementation 'mysql:mysql-connector-java:8.0.26'
    implementation 'org.slf4j:slf4j-api:1.7.35'
    implementation 'org.slf4j:slf4j-log4j12:1.7.35'
    implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.13.1'
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.13.1'
    implementation 'com.oracle.ojdbc:ojdbc8:19.3.0.0'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.2'
}

generateGrammarSource {
    outputDirectory = file("src/main/java/it/unibo/antlr/gen")
    arguments += ["-visitor"]
}

compileKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}

compileTestKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}

test {
    useJUnitPlatform()
    testLogging {
        exceptionFormat = 'full'
    }
    maxParallelForks = 1
    jvmArgs "-Xmx4g"
}

task runMigration(type: JavaExec) {
    main = 'it.w4bo.database.Migrate'
    classpath = sourceSets.main.runtimeClasspath
}

defaultTasks 'clean', 'build', 'check', 'war', 'shadowJar', 'runMigration'
