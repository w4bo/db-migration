plugins {
    id 'java-library'
    id 'war'
    id 'antlr'
    id 'org.jetbrains.kotlin.jvm' version '1.5.21'
    id 'org.gretty' version '3.0.6'
    id 'idea'
    // id 'checkstyle'
}

gretty {   // Add these lines
    contextPath = '/'
    servletContainer = 'jetty9'
}

compileJava {
    sourceCompatibility = '1.8'
    targetCompatibility = '1.8'
}

repositories {
    jcenter()
    mavenCentral()
    maven { url "https://kotlin.bintray.com/kotlinx" }
}

sourceSets {
    main { resources { srcDirs 'src/main/resources' } }
    // main { resources { srcDirs 'src/main/sql' } }
    // main { resources { srcDirs 'resources' } }
    // test { resources { srcDirs 'resources' } }
}

dependencies {
    implementation 'io.github.cdimascio:dotenv-kotlin:6.2.2'
    // ANTLR 4
    antlr "org.antlr:antlr4:4.9.2"
    implementation 'org.antlr:antlr4:4.9.2'
    // servlet
    implementation 'javax:javaee-api:8.0.1'
    implementation 'io.ktor:ktor-server-servlet:1.6.2'
    // kotlin
    implementation "org.jetbrains.kotlinx:kotlinx-cli:0.3.2"
    implementation 'de.mpicbg.scicomp:krangl:0.15.3'
    implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk8'
    // java
    implementation 'mysql:mysql-connector-java:8.0.26'
    implementation 'org.apache.commons:commons-csv:1.9.0'
    implementation 'com.github.javafaker:javafaker:1.0.2'
    // https://mvnrepository.com/artifact/com.github.haifengl/smile-core
    implementation 'com.github.haifengl:smile-core:2.6.0'
    // implementation 'net.sf.extjwnl:extjwnl:2.0.2' // wordnet
    // implementation 'net.sf.extjwnl:extjwnl-data-wn31:1.2'
    // implementation 'edu.stanford.nlp:stanford-corenlp:3.9.2:models'
    implementation 'org.jgrapht:jgrapht-core:1.5.1'
    implementation 'edu.stanford.nlp:stanford-corenlp:4.2.2'
    implementation 'org.apache.commons:commons-lang3:3.12.0'
    implementation 'commons-io:commons-io:2.11.0'
    implementation 'org.slf4j:slf4j-api:1.7.32'
    implementation 'org.slf4j:slf4j-log4j12:1.7.32'
    implementation 'org.json:json:20210307'
    // implementation 'com.googlecode.json-simple:json-simple:1.1.1'
    implementation 'com.google.guava:guava:30.1.1-jre'
    implementation 'com.opencsv:opencsv:5.5.1'
    implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.12.4'
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.12.4'
    implementation 'com.oracle.ojdbc:ojdbc8:19.3.0.0'
    implementation 'org.jooq:jool:0.9.14'
    // Test
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.7.2'
}

generateGrammarSource {
    outputDirectory = file("src/main/java/it/unibo/antlr/gen")
    arguments += ["-visitor"]
}

compileKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}

compileTestKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}

test {
    useJUnitPlatform()
    testLogging {
        exceptionFormat = 'full'
    }
    maxParallelForks = 1
    jvmArgs "-Xmx4g"
}


task runDBreader(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = "it.unibo.conversational.database.DBreader"
    jvmArgs = ['-Xmx12g']
}

task runValidatorSequential(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = "it.unibo.conversational.Validator"
    args = ["sequential"]
    jvmArgs = ['-Xmx12g']
}

task runValidator(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = "it.unibo.conversational.Validator"
    jvmArgs = ['-Xmx12g']
}

defaultTasks 'clean', 'build', 'check', 'war'
